// Implementation file for parser generated by fsyacc
module UsqlPar

#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "..\MySharp\Parser.fsy"

  (* Usql/UsqlPar.fsy
     Parser specification for micro-SQL
     sestoft@itu.dk 2009-09-03 *) 
  open Absyn; 

# 13 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | LPAR
  | RPAR
  | COMMA
  | DOT
  | ASSIGN
  | EQ
  | NE
  | GT
  | LT
  | GE
  | LE
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | AND
  | FROM
  | NOT
  | OR
  | SELECT
  | WHERE
  | SET
  | CSTBOOL of (bool)
  | CSTSTRING of (string)
  | NAME of (string)
  | CSTINT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_COMMA
    | TOKEN_DOT
    | TOKEN_ASSIGN
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_AND
    | TOKEN_FROM
    | TOKEN_NOT
    | TOKEN_OR
    | TOKEN_SELECT
    | TOKEN_WHERE
    | TOKEN_SET
    | TOKEN_CSTBOOL
    | TOKEN_CSTSTRING
    | TOKEN_NAME
    | TOKEN_CSTINT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Stmt
    | NONTERM_Names1
    | NONTERM_Column
    | NONTERM_Expr
    | NONTERM_Exprs
    | NONTERM_Exprs1
    | NONTERM_Const

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | LPAR  -> 1 
  | RPAR  -> 2 
  | COMMA  -> 3 
  | DOT  -> 4 
  | ASSIGN  -> 5 
  | EQ  -> 6 
  | NE  -> 7 
  | GT  -> 8 
  | LT  -> 9 
  | GE  -> 10 
  | LE  -> 11 
  | PLUS  -> 12 
  | MINUS  -> 13 
  | TIMES  -> 14 
  | DIV  -> 15 
  | MOD  -> 16 
  | AND  -> 17 
  | FROM  -> 18 
  | NOT  -> 19 
  | OR  -> 20 
  | SELECT  -> 21 
  | WHERE  -> 22 
  | SET  -> 23 
  | CSTBOOL _ -> 24 
  | CSTSTRING _ -> 25 
  | NAME _ -> 26 
  | CSTINT _ -> 27 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_LPAR 
  | 2 -> TOKEN_RPAR 
  | 3 -> TOKEN_COMMA 
  | 4 -> TOKEN_DOT 
  | 5 -> TOKEN_ASSIGN 
  | 6 -> TOKEN_EQ 
  | 7 -> TOKEN_NE 
  | 8 -> TOKEN_GT 
  | 9 -> TOKEN_LT 
  | 10 -> TOKEN_GE 
  | 11 -> TOKEN_LE 
  | 12 -> TOKEN_PLUS 
  | 13 -> TOKEN_MINUS 
  | 14 -> TOKEN_TIMES 
  | 15 -> TOKEN_DIV 
  | 16 -> TOKEN_MOD 
  | 17 -> TOKEN_AND 
  | 18 -> TOKEN_FROM 
  | 19 -> TOKEN_NOT 
  | 20 -> TOKEN_OR 
  | 21 -> TOKEN_SELECT 
  | 22 -> TOKEN_WHERE 
  | 23 -> TOKEN_SET 
  | 24 -> TOKEN_CSTBOOL 
  | 25 -> TOKEN_CSTSTRING 
  | 26 -> TOKEN_NAME 
  | 27 -> TOKEN_CSTINT 
  | 30 -> TOKEN_end_of_input
  | 28 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Stmt 
    | 3 -> NONTERM_Stmt 
    | 4 -> NONTERM_Stmt 
    | 5 -> NONTERM_Names1 
    | 6 -> NONTERM_Names1 
    | 7 -> NONTERM_Column 
    | 8 -> NONTERM_Column 
    | 9 -> NONTERM_Expr 
    | 10 -> NONTERM_Expr 
    | 11 -> NONTERM_Expr 
    | 12 -> NONTERM_Expr 
    | 13 -> NONTERM_Expr 
    | 14 -> NONTERM_Expr 
    | 15 -> NONTERM_Expr 
    | 16 -> NONTERM_Expr 
    | 17 -> NONTERM_Expr 
    | 18 -> NONTERM_Expr 
    | 19 -> NONTERM_Expr 
    | 20 -> NONTERM_Expr 
    | 21 -> NONTERM_Expr 
    | 22 -> NONTERM_Expr 
    | 23 -> NONTERM_Expr 
    | 24 -> NONTERM_Expr 
    | 25 -> NONTERM_Expr 
    | 26 -> NONTERM_Expr 
    | 27 -> NONTERM_Expr 
    | 28 -> NONTERM_Exprs 
    | 29 -> NONTERM_Exprs 
    | 30 -> NONTERM_Exprs1 
    | 31 -> NONTERM_Exprs1 
    | 32 -> NONTERM_Const 
    | 33 -> NONTERM_Const 
    | 34 -> NONTERM_Const 
    | 35 -> NONTERM_Const 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 30 
let _fsyacc_tagOfErrorTerminal = 28

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | COMMA  -> "COMMA" 
  | DOT  -> "DOT" 
  | ASSIGN  -> "ASSIGN" 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | GE  -> "GE" 
  | LE  -> "LE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | AND  -> "AND" 
  | FROM  -> "FROM" 
  | NOT  -> "NOT" 
  | OR  -> "OR" 
  | SELECT  -> "SELECT" 
  | WHERE  -> "WHERE" 
  | SET  -> "SET" 
  | CSTBOOL _ -> "CSTBOOL" 
  | CSTSTRING _ -> "CSTSTRING" 
  | NAME _ -> "NAME" 
  | CSTINT _ -> "CSTINT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | FROM  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | SELECT  -> (null : System.Object) 
  | WHERE  -> (null : System.Object) 
  | SET  -> (null : System.Object) 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTSTRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 2us; 65535us; 6us; 7us; 15us; 16us; 19us; 65535us; 4us; 21us; 8us; 21us; 22us; 21us; 26us; 21us; 29us; 21us; 45us; 21us; 46us; 21us; 47us; 21us; 48us; 21us; 49us; 21us; 50us; 21us; 51us; 21us; 52us; 21us; 53us; 21us; 54us; 21us; 55us; 21us; 56us; 21us; 57us; 21us; 59us; 21us; 19us; 65535us; 4us; 44us; 8us; 44us; 22us; 44us; 26us; 27us; 29us; 30us; 45us; 31us; 46us; 32us; 47us; 33us; 48us; 34us; 49us; 35us; 50us; 36us; 51us; 37us; 52us; 38us; 53us; 39us; 54us; 40us; 55us; 41us; 56us; 42us; 57us; 43us; 59us; 44us; 1us; 65535us; 22us; 23us; 4us; 65535us; 4us; 5us; 8us; 9us; 22us; 58us; 59us; 60us; 19us; 65535us; 4us; 25us; 8us; 25us; 22us; 25us; 26us; 25us; 29us; 25us; 45us; 25us; 46us; 25us; 47us; 25us; 48us; 25us; 49us; 25us; 50us; 25us; 51us; 25us; 52us; 25us; 53us; 25us; 54us; 25us; 55us; 25us; 56us; 25us; 57us; 25us; 59us; 25us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 8us; 28us; 48us; 50us; 55us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 2us; 2us; 3us; 2us; 2us; 3us; 2us; 2us; 3us; 2us; 2us; 3us; 1us; 2us; 1us; 2us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 4us; 2us; 5us; 6us; 1us; 6us; 1us; 6us; 3us; 7us; 8us; 11us; 1us; 8us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 13us; 14us; 13us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 1us; 13us; 1us; 14us; 14us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 14us; 15us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 14us; 15us; 16us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 14us; 15us; 16us; 17us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 14us; 15us; 16us; 17us; 18us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 14us; 15us; 16us; 17us; 18us; 19us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 22us; 23us; 24us; 25us; 26us; 27us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 23us; 24us; 25us; 26us; 27us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 24us; 25us; 26us; 27us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 25us; 26us; 27us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 26us; 27us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 27us; 15us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 30us; 31us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 29us; 1us; 31us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 33us; 1us; 34us; 1us; 35us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 11us; 14us; 17us; 20us; 22us; 24us; 26us; 28us; 30us; 32us; 35us; 37us; 39us; 43us; 45us; 47us; 49us; 51us; 53us; 55us; 57us; 59us; 61us; 76us; 78us; 80us; 95us; 110us; 125us; 140us; 155us; 170us; 185us; 200us; 215us; 230us; 245us; 260us; 275us; 290us; 306us; 308us; 310us; 312us; 314us; 316us; 318us; 320us; 322us; 324us; 326us; 328us; 330us; 332us; 334us; 336us; 338us; 340us; 342us; 344us; 346us; |]
let _fsyacc_action_rows = 66
let _fsyacc_actionTableElements = [|2us; 32768us; 21us; 4us; 23us; 10us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 8us; 32768us; 1us; 26us; 13us; 62us; 14us; 20us; 19us; 29us; 24us; 64us; 25us; 65us; 26us; 17us; 27us; 61us; 1us; 32768us; 18us; 6us; 1us; 32768us; 26us; 14us; 1us; 16387us; 22us; 8us; 8us; 32768us; 1us; 26us; 13us; 62us; 14us; 20us; 19us; 29us; 24us; 64us; 25us; 65us; 26us; 17us; 27us; 61us; 0us; 16386us; 1us; 32768us; 26us; 11us; 1us; 32768us; 5us; 12us; 1us; 32768us; 25us; 13us; 0us; 16388us; 1us; 16389us; 3us; 15us; 1us; 32768us; 26us; 14us; 0us; 16390us; 2us; 16391us; 1us; 22us; 4us; 18us; 1us; 32768us; 26us; 19us; 0us; 16392us; 0us; 16393us; 0us; 16394us; 8us; 16412us; 1us; 26us; 13us; 62us; 14us; 20us; 19us; 29us; 24us; 64us; 25us; 65us; 26us; 17us; 27us; 61us; 1us; 32768us; 2us; 24us; 0us; 16395us; 0us; 16396us; 8us; 32768us; 1us; 26us; 13us; 62us; 14us; 20us; 19us; 29us; 24us; 64us; 25us; 65us; 26us; 17us; 27us; 61us; 14us; 32768us; 2us; 28us; 6us; 50us; 7us; 51us; 8us; 52us; 9us; 53us; 10us; 54us; 11us; 55us; 12us; 45us; 13us; 46us; 14us; 47us; 15us; 48us; 16us; 49us; 17us; 56us; 20us; 57us; 0us; 16397us; 8us; 32768us; 1us; 26us; 13us; 62us; 14us; 20us; 19us; 29us; 24us; 64us; 25us; 65us; 26us; 17us; 27us; 61us; 0us; 16398us; 3us; 16399us; 14us; 47us; 15us; 48us; 16us; 49us; 3us; 16400us; 14us; 47us; 15us; 48us; 16us; 49us; 0us; 16401us; 0us; 16402us; 0us; 16403us; 9us; 16404us; 8us; 52us; 9us; 53us; 10us; 54us; 11us; 55us; 12us; 45us; 13us; 46us; 14us; 47us; 15us; 48us; 16us; 49us; 9us; 16405us; 8us; 52us; 9us; 53us; 10us; 54us; 11us; 55us; 12us; 45us; 13us; 46us; 14us; 47us; 15us; 48us; 16us; 49us; 9us; 16406us; 8us; 52us; 9us; 53us; 10us; 54us; 11us; 55us; 12us; 45us; 13us; 46us; 14us; 47us; 15us; 48us; 16us; 49us; 9us; 16407us; 8us; 52us; 9us; 53us; 10us; 54us; 11us; 55us; 12us; 45us; 13us; 46us; 14us; 47us; 15us; 48us; 16us; 49us; 9us; 16408us; 8us; 52us; 9us; 53us; 10us; 54us; 11us; 55us; 12us; 45us; 13us; 46us; 14us; 47us; 15us; 48us; 16us; 49us; 9us; 16409us; 8us; 52us; 9us; 53us; 10us; 54us; 11us; 55us; 12us; 45us; 13us; 46us; 14us; 47us; 15us; 48us; 16us; 49us; 11us; 16410us; 6us; 50us; 7us; 51us; 8us; 52us; 9us; 53us; 10us; 54us; 11us; 55us; 12us; 45us; 13us; 46us; 14us; 47us; 15us; 48us; 16us; 49us; 12us; 16411us; 6us; 50us; 7us; 51us; 8us; 52us; 9us; 53us; 10us; 54us; 11us; 55us; 12us; 45us; 13us; 46us; 14us; 47us; 15us; 48us; 16us; 49us; 17us; 56us; 14us; 16414us; 3us; 59us; 6us; 50us; 7us; 51us; 8us; 52us; 9us; 53us; 10us; 54us; 11us; 55us; 12us; 45us; 13us; 46us; 14us; 47us; 15us; 48us; 16us; 49us; 17us; 56us; 20us; 57us; 8us; 32768us; 1us; 26us; 13us; 62us; 14us; 20us; 19us; 29us; 24us; 64us; 25us; 65us; 26us; 17us; 27us; 61us; 8us; 32768us; 1us; 26us; 13us; 62us; 14us; 20us; 19us; 29us; 24us; 64us; 25us; 65us; 26us; 17us; 27us; 61us; 8us; 32768us; 1us; 26us; 13us; 62us; 14us; 20us; 19us; 29us; 24us; 64us; 25us; 65us; 26us; 17us; 27us; 61us; 8us; 32768us; 1us; 26us; 13us; 62us; 14us; 20us; 19us; 29us; 24us; 64us; 25us; 65us; 26us; 17us; 27us; 61us; 8us; 32768us; 1us; 26us; 13us; 62us; 14us; 20us; 19us; 29us; 24us; 64us; 25us; 65us; 26us; 17us; 27us; 61us; 8us; 32768us; 1us; 26us; 13us; 62us; 14us; 20us; 19us; 29us; 24us; 64us; 25us; 65us; 26us; 17us; 27us; 61us; 8us; 32768us; 1us; 26us; 13us; 62us; 14us; 20us; 19us; 29us; 24us; 64us; 25us; 65us; 26us; 17us; 27us; 61us; 8us; 32768us; 1us; 26us; 13us; 62us; 14us; 20us; 19us; 29us; 24us; 64us; 25us; 65us; 26us; 17us; 27us; 61us; 8us; 32768us; 1us; 26us; 13us; 62us; 14us; 20us; 19us; 29us; 24us; 64us; 25us; 65us; 26us; 17us; 27us; 61us; 8us; 32768us; 1us; 26us; 13us; 62us; 14us; 20us; 19us; 29us; 24us; 64us; 25us; 65us; 26us; 17us; 27us; 61us; 8us; 32768us; 1us; 26us; 13us; 62us; 14us; 20us; 19us; 29us; 24us; 64us; 25us; 65us; 26us; 17us; 27us; 61us; 8us; 32768us; 1us; 26us; 13us; 62us; 14us; 20us; 19us; 29us; 24us; 64us; 25us; 65us; 26us; 17us; 27us; 61us; 8us; 32768us; 1us; 26us; 13us; 62us; 14us; 20us; 19us; 29us; 24us; 64us; 25us; 65us; 26us; 17us; 27us; 61us; 0us; 16413us; 8us; 32768us; 1us; 26us; 13us; 62us; 14us; 20us; 19us; 29us; 24us; 64us; 25us; 65us; 26us; 17us; 27us; 61us; 0us; 16415us; 0us; 16416us; 1us; 32768us; 27us; 63us; 0us; 16417us; 0us; 16418us; 0us; 16419us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 3us; 4us; 6us; 7us; 16us; 18us; 20us; 22us; 31us; 32us; 34us; 36us; 38us; 39us; 41us; 43us; 44us; 47us; 49us; 50us; 51us; 52us; 61us; 63us; 64us; 65us; 74us; 89us; 90us; 99us; 100us; 104us; 108us; 109us; 110us; 111us; 121us; 131us; 141us; 151us; 161us; 171us; 183us; 196us; 211us; 220us; 229us; 238us; 247us; 256us; 265us; 274us; 283us; 292us; 301us; 310us; 319us; 328us; 329us; 338us; 339us; 340us; 342us; 343us; 344us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 6us; 4us; 4us; 1us; 3us; 1us; 3us; 1us; 1us; 4us; 1us; 3us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 0us; 1us; 1us; 3us; 1us; 2us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 3us; 3us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; 8us; 8us; 8us; 8us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 16386us; 65535us; 65535us; 65535us; 16388us; 65535us; 65535us; 16390us; 65535us; 65535us; 16392us; 16393us; 16394us; 65535us; 65535us; 16395us; 16396us; 65535us; 65535us; 16397us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16413us; 65535us; 16415us; 16416us; 65535us; 16417us; 16418us; 16419us; |]
let _fsyacc_reductions ()  =    [| 
# 273 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 282 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "..\MySharp\Parser.fsy"
                                       _1 
                   )
# 41 "..\MySharp\Parser.fsy"
                 : Absyn.stmt));
# 293 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr list)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string list)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "..\MySharp\Parser.fsy"
                                                                         Select(_2, _4 ,Some(_6)) 
                   )
# 45 "..\MySharp\Parser.fsy"
                 : Absyn.stmt));
# 306 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr list)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "..\MySharp\Parser.fsy"
                                                      Select(_2, _4 ,None) 
                   )
# 46 "..\MySharp\Parser.fsy"
                 : Absyn.stmt));
# 318 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "..\MySharp\Parser.fsy"
                                                     Set(_2,_4)
                   )
# 47 "..\MySharp\Parser.fsy"
                 : Absyn.stmt));
# 330 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "..\MySharp\Parser.fsy"
                                                               [_1]     
                   )
# 51 "..\MySharp\Parser.fsy"
                 : string list));
# 341 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "..\MySharp\Parser.fsy"
                                                               _1 :: _3 
                   )
# 52 "..\MySharp\Parser.fsy"
                 : string list));
# 353 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "..\MySharp\Parser.fsy"
                                   Column _1           
                   )
# 56 "..\MySharp\Parser.fsy"
                 : Absyn.column));
# 364 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "..\MySharp\Parser.fsy"
                                           TableColumn(_1, _3) 
                   )
# 57 "..\MySharp\Parser.fsy"
                 : Absyn.column));
# 376 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "..\MySharp\Parser.fsy"
                                    Star                 
                   )
# 61 "..\MySharp\Parser.fsy"
                 : Absyn.expr));
# 386 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.column)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "..\MySharp\Parser.fsy"
                                     ColumnExpr _1        
                   )
# 62 "..\MySharp\Parser.fsy"
                 : Absyn.expr));
# 397 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "..\MySharp\Parser.fsy"
                                                 Prim(_1, _3)         
                   )
# 63 "..\MySharp\Parser.fsy"
                 : Absyn.expr));
# 409 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.constant)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "..\MySharp\Parser.fsy"
                                                               Cst(_1)              
                   )
# 64 "..\MySharp\Parser.fsy"
                 : Absyn.expr));
# 420 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "..\MySharp\Parser.fsy"
                                                               _2                   
                   )
# 65 "..\MySharp\Parser.fsy"
                 : Absyn.expr));
# 431 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "..\MySharp\Parser.fsy"
                                                               Prim("!", [_2])      
                   )
# 66 "..\MySharp\Parser.fsy"
                 : Absyn.expr));
# 442 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "..\MySharp\Parser.fsy"
                                                               Prim("+",  [_1; _3]) 
                   )
# 67 "..\MySharp\Parser.fsy"
                 : Absyn.expr));
# 454 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "..\MySharp\Parser.fsy"
                                                               Prim("-",  [_1; _3]) 
                   )
# 68 "..\MySharp\Parser.fsy"
                 : Absyn.expr));
# 466 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "..\MySharp\Parser.fsy"
                                                               Prim("*",  [_1; _3]) 
                   )
# 69 "..\MySharp\Parser.fsy"
                 : Absyn.expr));
# 478 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "..\MySharp\Parser.fsy"
                                                               Prim("/",  [_1; _3]) 
                   )
# 70 "..\MySharp\Parser.fsy"
                 : Absyn.expr));
# 490 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "..\MySharp\Parser.fsy"
                                                               Prim("%",  [_1; _3]) 
                   )
# 71 "..\MySharp\Parser.fsy"
                 : Absyn.expr));
# 502 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "..\MySharp\Parser.fsy"
                                                               Prim("==", [_1; _3]) 
                   )
# 72 "..\MySharp\Parser.fsy"
                 : Absyn.expr));
# 514 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "..\MySharp\Parser.fsy"
                                                               Prim("!=", [_1; _3]) 
                   )
# 73 "..\MySharp\Parser.fsy"
                 : Absyn.expr));
# 526 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "..\MySharp\Parser.fsy"
                                                               Prim(">",  [_1; _3]) 
                   )
# 74 "..\MySharp\Parser.fsy"
                 : Absyn.expr));
# 538 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "..\MySharp\Parser.fsy"
                                                               Prim("<",  [_1; _3]) 
                   )
# 75 "..\MySharp\Parser.fsy"
                 : Absyn.expr));
# 550 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "..\MySharp\Parser.fsy"
                                                               Prim(">=", [_1; _3]) 
                   )
# 76 "..\MySharp\Parser.fsy"
                 : Absyn.expr));
# 562 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "..\MySharp\Parser.fsy"
                                                               Prim("<=", [_1; _3]) 
                   )
# 77 "..\MySharp\Parser.fsy"
                 : Absyn.expr));
# 574 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "..\MySharp\Parser.fsy"
                                                               Prim("&&", [_1; _3]) 
                   )
# 78 "..\MySharp\Parser.fsy"
                 : Absyn.expr));
# 586 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "..\MySharp\Parser.fsy"
                                                               Prim("||", [_1; _3]) 
                   )
# 79 "..\MySharp\Parser.fsy"
                 : Absyn.expr));
# 598 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "..\MySharp\Parser.fsy"
                                                               [] 
                   )
# 83 "..\MySharp\Parser.fsy"
                 : Absyn.expr list));
# 608 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "..\MySharp\Parser.fsy"
                                                               _1 
                   )
# 84 "..\MySharp\Parser.fsy"
                 : Absyn.expr list));
# 619 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "..\MySharp\Parser.fsy"
                                                               [_1]     
                   )
# 88 "..\MySharp\Parser.fsy"
                 : Absyn.expr list));
# 630 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "..\MySharp\Parser.fsy"
                                                               _1 :: _3 
                   )
# 89 "..\MySharp\Parser.fsy"
                 : Absyn.expr list));
# 642 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "..\MySharp\Parser.fsy"
                                                               CstI(_1)   
                   )
# 93 "..\MySharp\Parser.fsy"
                 : Absyn.constant));
# 653 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "..\MySharp\Parser.fsy"
                                                               CstI(-_2) 
                   )
# 94 "..\MySharp\Parser.fsy"
                 : Absyn.constant));
# 664 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "..\MySharp\Parser.fsy"
                                                               CstB(_1)   
                   )
# 95 "..\MySharp\Parser.fsy"
                 : Absyn.constant));
# 675 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "..\MySharp\Parser.fsy"
                                                               CstS(_1)   
                   )
# 96 "..\MySharp\Parser.fsy"
                 : Absyn.constant));
|]
# 687 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 31;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.stmt =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
